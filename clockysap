#!/usr/bin/env python3
import argparse
import locale
import re
import time
from csv import DictReader
from datetime import datetime, timedelta

import pytz
import requests
from selenium import webdriver
from selenium.common.exceptions import ElementNotInteractableException
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as expect
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.firefox.options import Options

local_tz = pytz.timezone('Europe/Berlin')
iso_date_pattern = re.compile(r'^\d{4}-\d{2}-\d{2}$')


def convert_tz(utc_dt):
    local = utc_dt.replace(tzinfo=pytz.utc).astimezone(local_tz)
    return local_tz.normalize(local)


def get_clockify_report(apikey, start, end):
    response = requests.get("https://api.clockify.me/api/v1/workspaces", headers={"X-Api-Key": apikey})
    workspaces = response.json()
    workspace_id = workspaces[0]['id']
    now = datetime.now()
    if not start:
        start_of_week = now - timedelta(days=now.weekday())
        start = f"{start_of_week.year:04d}-{start_of_week.month:02d}-{start_of_week.day:02d}"
    if not end:
        end = f"{now.year:04d}-{now.month:02d}-{now.day:02d}"
    response = requests.post(f"https://reports.api.clockify.me/v1/workspaces/{workspace_id}/reports/detailed",
                             json={
                                 "dateRangeStart": f"{start}T00:00:00.000Z",
                                 "dateRangeEnd": f"{end}T23:59:59.999Z",
                                 "amountShown": "HIDE_AMOUNT",
                                 "sortOrder": "ASCENDING",
                                 "detailedFilter": {
                                     "page": 1,
                                     "pageSize": 100,
                                     "sortColumn": "DATE"
                                 }
                             },
                             headers={"X-Api-Key": apikey}, )
    return response.json()


def round_time(dt=None, round_to=60):
    """Round a datetime object to any time lapse in seconds
    dt : datetime.datetime object, default now.
    round_to : Closest number of seconds to round to, default 1 minute.
    Author: Thierry Husson 2012 - Use it as you want but don't blame me.
    """
    if dt is None:
        dt = datetime.now()
    seconds = (dt.replace(tzinfo=None) - dt.min).seconds
    rounding = (seconds + round_to / 2) // round_to * round_to
    return dt + timedelta(0, rounding - seconds, -dt.microsecond)


def enter_time(drv, time_picker, start_time):
    start_time = round_time(start_time, 15 * 60)
    hours = start_time.strftime("%H")
    minutes = start_time.minute / 10  # only the first digit is needed
    open_button = WebDriverWait(drv, 3000).until(
        expect.element_to_be_clickable((By.ID, f"{time_picker}-icon")))
    open_button.click()
    pop_over = WebDriverWait(drv, 3000).until(
        expect.presence_of_element_located((By.ID, f"{time_picker}-RP-popover")))
    ok_button = pop_over.find_element(By.TAG_NAME, "bdi")
    hours_slider = pop_over.find_element(By.ID, f"{time_picker}-inner")
    hours_slider.send_keys(f"{hours}:{minutes:1g}")
    ok_button.click()


def get_tickets(ticket_mapping):
    map = {}
    with open(ticket_mapping) as ticket_numbers:
        tndata = DictReader(ticket_numbers, delimiter=';')
        for entry in tndata:
            try:
                mapped_project = entry["Project"]
            except KeyError:
                print("Error: Ticket mapping file must have a column called 'Beschreibung'")
                exit(1)
            try:
                mapped_task = entry["Task"]
            except KeyError:
                print("Error: Ticket mapping file must have a column called 'Beschreibung'")
                exit(1)
            try:
                ticket = entry["Ticket"]
            except KeyError:
                print("Error: Ticket mapping file must have a column called 'Ticket'")
                exit(1)
            map[f'{mapped_project} {mapped_task}'] = ticket
    return map


parser = argparse.ArgumentParser(description="Import Clockify entries of the current month to SAP Successfactors")
parser.add_argument('--ticketmapping', help="A CSV file mapping clockify projects/activities to tickets")
parser.add_argument("--role", default="02", help="The role to use (e.g. 02 = Consultant")
parser.add_argument("--clockify-apikey", required=True, help="API key for Clockify")
parser.add_argument("--start", required=False, help="Start date in ISO format (YYYY-MM-DD). Default: Start of week")
parser.add_argument("--end", required=False, help="End date in ISO format (YYYY-MM-DD). Default: Today")

params = None

try:
    params = parser.parse_args()
except:
    parser.print_help()
    exit(1)

if params.start and not iso_date_pattern.match(params.start):
    print(f"Invalid date: {params.start}")
    parser.print_help()
    exit(1)

if params.end and not iso_date_pattern.match(params.end):
    print(f"Invalid date: {params.end}")
    parser.print_help()
    exit(1)

ticket_mapping = params.ticketmapping
role = params.role
clockify_apikey = params.clockify_apikey
opts = Options()
opts.add_argument("--no-sandbox")
driver = webdriver.Firefox(options=opts)

clockify = get_clockify_report(clockify_apikey, params.start, params.end)

ADD_ENTRY_BUTTON_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--btnAdd"
TICKET_DROPDOWN_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--inpTicketNoAdd-inner"
ROLE_DROPDOWN_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--selRoleAdd"
ACTIVITY_DROPDOWN_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--selActivityAdd"
TOTAL_TIME_DROPDOWN_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--selTimeAdd"
FROM_TIME_DROPDOWN_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--tpTimeFromAdd"
TILL_TIME_DROPDOWN_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--tpTimeTillAdd"
LONG_DESCRIPTION_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--tDescriptionAddLong"
LONG_DESCRIPTION_TEXTAREA_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--tDescriptionAddLong-inner"
RELEASE_CHECKBOX_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--ckbReleasedAdd-label-bdi"
SAVE_BUTTON_ID = "application-TIMEREPORTING_NAG-create-component---timeReportList--btnAddSave-BDI-content"

driver.get("https://portal.nagarro-es.com/ess/shells/abap/FioriLaunchpad.html#TIMEREPORTING-create")
WebDriverWait(driver, 600000).until(expect.presence_of_element_located(
    (By.ID, ADD_ENTRY_BUTTON_ID)))

locale_setting = ({"de": "de_DE", "en": "en_US"})[driver.find_element(By.TAG_NAME, "html").get_attribute("lang")]
locale.setlocale(locale.LC_NUMERIC, locale=locale_setting)

ticket_number_map = get_tickets(ticket_mapping) if ticket_mapping else None

for time_entry in clockify["timeentries"]:
    indate = datetime.fromisoformat(time_entry["timeInterval"]["start"])
    # indate = convert_tz(indate)
    outdate = datetime.fromisoformat(time_entry["timeInterval"]["end"])
    # outdate = convert_tz(outdate)
    date = indate.strftime("%Y%m%d")
    project = time_entry["projectName"]
    task = time_entry["taskName"]
    description = time_entry["description"]
    if not time_entry["billable"]:
        activity = "NB"
    else:
        activity = "PW"
    task_parts = re.match(r'([0-9]+): (.*)', task)
    if task_parts:
        ticket_number, task = task_parts.groups()
    else:
        ticket_number = ticket_number_map[f"{project} {task}"]
    time.sleep(1)
    addButton = WebDriverWait(driver, 600000).until(expect.element_to_be_clickable((By.ID, ADD_ENTRY_BUTTON_ID)))
    addButton.click()
    time.sleep(1)
    try:
        dateSelector = WebDriverWait(driver, 3000).until(
            expect.element_to_be_clickable((By.XPATH,
                                            f"//div[@data-sap-day=\"{date}\"]/span[@class=\"sapUiCalItemText\"]")))
        dateSelector.click()
        ticketNumberInput = driver.find_element(By.ID, TICKET_DROPDOWN_ID)
        ticketNumberInput.send_keys(Keys.BACKSPACE)
        ticketNumberInput.send_keys(ticket_number)
        ticketNumberInput.send_keys(Keys.ENTER)
        time.sleep(1)
        driver.find_element(By.ID, ROLE_DROPDOWN_ID).send_keys(role)
        driver.find_element(By.ID, ROLE_DROPDOWN_ID).send_keys(Keys.ENTER)
        driver.find_element(By.ID, ACTIVITY_DROPDOWN_ID).send_keys(activity)
        driver.find_element(By.ID, ACTIVITY_DROPDOWN_ID).send_keys(Keys.ENTER)
        timeDiff = round(((indate - outdate).seconds / 3600.0) * 4.0, 0) / 4.0 # round to nearest quarter hour
        driver.find_element(By.ID, TOTAL_TIME_DROPDOWN_ID).send_keys(locale.format_string("%g", timeDiff))
        enter_time(driver, FROM_TIME_DROPDOWN_ID, indate)
        enter_time(driver, TILL_TIME_DROPDOWN_ID, outdate)
        driver.find_element(By.ID, LONG_DESCRIPTION_ID).click()
        driver.find_element(By.ID, LONG_DESCRIPTION_TEXTAREA_ID).send_keys(description)
        WebDriverWait(driver, 3000).until(
            expect.element_to_be_clickable((By.ID, RELEASE_CHECKBOX_ID))).click()
    except ElementNotInteractableException as e:
        print(f"WARNING: Exception was thrown: {e.msg}")
        print()
        print("Please enter the following data by hand:")
        print("----------------------------------------")
        print(f"Date:          {date}")
        print(f"Ticket number: {ticket_number}")
        print(f"Role:          {role}")
        print(f"Start:         {indate}")
        print(f"End:           {outdate}")
        print(f"Description:   {description}")
    WebDriverWait(driver, 600000).until(expect.invisibility_of_element_located((By.ID, SAVE_BUTTON_ID)))

time.sleep(5)
driver.quit()
